/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IInterestOracleInterface extends ethers.utils.Interface {
  functions: {
    "moneyMarket()": FunctionFragment;
    "query()": FunctionFragment;
    "updateAndQuery()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "moneyMarket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "query", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAndQuery",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "moneyMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "query", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAndQuery",
    data: BytesLike
  ): Result;

  events: {};
}

export class IInterestOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IInterestOracleInterface;

  functions: {
    moneyMarket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "moneyMarket()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    query(
      overrides?: CallOverrides
    ): Promise<{
      value: BigNumber;
      0: BigNumber;
    }>;

    "query()"(
      overrides?: CallOverrides
    ): Promise<{
      value: BigNumber;
      0: BigNumber;
    }>;

    updateAndQuery(overrides?: Overrides): Promise<ContractTransaction>;

    "updateAndQuery()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  moneyMarket(overrides?: CallOverrides): Promise<string>;

  "moneyMarket()"(overrides?: CallOverrides): Promise<string>;

  query(overrides?: CallOverrides): Promise<BigNumber>;

  "query()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateAndQuery(overrides?: Overrides): Promise<ContractTransaction>;

  "updateAndQuery()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    moneyMarket(overrides?: CallOverrides): Promise<string>;

    "moneyMarket()"(overrides?: CallOverrides): Promise<string>;

    query(overrides?: CallOverrides): Promise<BigNumber>;

    "query()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateAndQuery(
      overrides?: CallOverrides
    ): Promise<{
      updated: boolean;
      value: BigNumber;
      0: boolean;
      1: BigNumber;
    }>;

    "updateAndQuery()"(
      overrides?: CallOverrides
    ): Promise<{
      updated: boolean;
      value: BigNumber;
      0: boolean;
      1: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    moneyMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "moneyMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    query(overrides?: CallOverrides): Promise<BigNumber>;

    "query()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateAndQuery(overrides?: Overrides): Promise<BigNumber>;

    "updateAndQuery()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    moneyMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "moneyMarket()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    query(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "query()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAndQuery(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateAndQuery()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}

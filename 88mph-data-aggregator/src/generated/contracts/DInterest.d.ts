/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DInterestInterface extends ethers.utils.Interface {
  functions: {
    "MaxDepositAmount()": FunctionFragment;
    "MaxDepositPeriod()": FunctionFragment;
    "MinDepositAmount()": FunctionFragment;
    "MinDepositPeriod()": FunctionFragment;
    "calculateInterestAmount(uint256,uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "depositIsFunded(uint256)": FunctionFragment;
    "depositNFT()": FunctionFragment;
    "depositsLength()": FunctionFragment;
    "earlyWithdraw(uint256,uint256)": FunctionFragment;
    "feeModel()": FunctionFragment;
    "fundAll()": FunctionFragment;
    "fundMultiple(uint256)": FunctionFragment;
    "fundingListLength()": FunctionFragment;
    "fundingNFT()": FunctionFragment;
    "getDeposit(uint256)": FunctionFragment;
    "getFunding(uint256)": FunctionFragment;
    "interestModel()": FunctionFragment;
    "interestOracle()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "latestFundedDepositID()": FunctionFragment;
    "moneyMarket()": FunctionFragment;
    "moneyMarketIncomeIndex()": FunctionFragment;
    "mphMinter()": FunctionFragment;
    "multiDeposit(uint256[],uint256[])": FunctionFragment;
    "multiEarlyWithdraw(uint256[],uint256[])": FunctionFragment;
    "multiWithdraw(uint256[],uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDepositNFTBaseURI(string)": FunctionFragment;
    "setDepositNFTContractURI(string)": FunctionFragment;
    "setDepositNFTTokenURI(uint256,string)": FunctionFragment;
    "setFeeModel(address)": FunctionFragment;
    "setFundingNFTBaseURI(string)": FunctionFragment;
    "setFundingNFTContractURI(string)": FunctionFragment;
    "setFundingNFTTokenURI(uint256,string)": FunctionFragment;
    "setInterestModel(address)": FunctionFragment;
    "setInterestOracle(address)": FunctionFragment;
    "setMPHMinter(address)": FunctionFragment;
    "setMaxDepositAmount(uint256)": FunctionFragment;
    "setMaxDepositPeriod(uint256)": FunctionFragment;
    "setMinDepositAmount(uint256)": FunctionFragment;
    "setMinDepositPeriod(uint256)": FunctionFragment;
    "setRewards(address)": FunctionFragment;
    "stablecoin()": FunctionFragment;
    "surplus()": FunctionFragment;
    "surplusOfDeposit(uint256)": FunctionFragment;
    "totalDeposit()": FunctionFragment;
    "totalInterestOwed()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unfundedUserDepositAmount()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MaxDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MaxDepositPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MinDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MinDepositPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterestAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositIsFunded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlyWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeModel", values?: undefined): string;
  encodeFunctionData(functionFragment: "fundAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundMultiple",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFunding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interestModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "latestFundedDepositID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moneyMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moneyMarketIncomeIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mphMinter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multiDeposit",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiEarlyWithdraw",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiWithdraw",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositNFTBaseURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositNFTContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositNFTTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "setFeeModel", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFundingNFTBaseURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingNFTContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingNFTTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestModel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMPHMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDepositPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDepositPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setRewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "surplus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "surplusOfDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalInterestOwed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unfundedUserDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MaxDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MaxDepositPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MinDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MinDepositPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterestAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositIsFunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeModel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundingNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFunding", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestFundedDepositID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moneyMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moneyMarketIncomeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mphMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiEarlyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositNFTBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositNFTContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositNFTTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingNFTBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingNFTContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingNFTTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMPHMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDepositPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDepositPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "surplus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "surplusOfDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInterestOwed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfundedUserDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "EDeposit(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "EFund(address,uint256,uint256)": EventFragment;
    "ESetParamAddress(address,string,address)": EventFragment;
    "ESetParamUint(address,string,uint256)": EventFragment;
    "EWithdraw(address,uint256,uint256,bool,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ESetParamAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ESetParamUint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class DInterest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DInterestInterface;

  functions: {
    MaxDepositAmount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MaxDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MaxDepositPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MaxDepositPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MinDepositAmount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MinDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MinDepositPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MinDepositPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calculateInterestAmount(
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "calculateInterestAmount(uint256,uint256)"(
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      maturationTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      amount: BigNumberish,
      maturationTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositIsFunded(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "depositIsFunded(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    depositNFT(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "depositNFT()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    depositsLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "depositsLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    earlyWithdraw(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "earlyWithdraw(uint256,uint256)"(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feeModel(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "feeModel()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    fundAll(overrides?: Overrides): Promise<ContractTransaction>;

    "fundAll()"(overrides?: Overrides): Promise<ContractTransaction>;

    fundMultiple(
      toDepositID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "fundMultiple(uint256)"(
      toDepositID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fundingListLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "fundingListLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    fundingNFT(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "fundingNFT()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getDeposit(
      depositID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        maturationTimestamp: BigNumber;
        interestOwed: BigNumber;
        initialMoneyMarketIncomeIndex: BigNumber;
        active: boolean;
        finalSurplusIsNegative: boolean;
        finalSurplusAmount: BigNumber;
        mintMPHAmount: BigNumber;
        depositTimestamp: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: boolean;
        5: boolean;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
      };
    }>;

    "getDeposit(uint256)"(
      depositID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        maturationTimestamp: BigNumber;
        interestOwed: BigNumber;
        initialMoneyMarketIncomeIndex: BigNumber;
        active: boolean;
        finalSurplusIsNegative: boolean;
        finalSurplusAmount: BigNumber;
        mintMPHAmount: BigNumber;
        depositTimestamp: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: boolean;
        5: boolean;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
      };
    }>;

    getFunding(
      fundingID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        fromDepositID: BigNumber;
        toDepositID: BigNumber;
        recordedFundedDepositAmount: BigNumber;
        recordedMoneyMarketIncomeIndex: BigNumber;
        creationTimestamp: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    "getFunding(uint256)"(
      fundingID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        fromDepositID: BigNumber;
        toDepositID: BigNumber;
        recordedFundedDepositAmount: BigNumber;
        recordedMoneyMarketIncomeIndex: BigNumber;
        creationTimestamp: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    interestModel(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "interestModel()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    interestOracle(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "interestOracle()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    latestFundedDepositID(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "latestFundedDepositID()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    moneyMarket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "moneyMarket()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    moneyMarketIncomeIndex(overrides?: Overrides): Promise<ContractTransaction>;

    "moneyMarketIncomeIndex()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mphMinter(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "mphMinter()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    multiDeposit(
      amountList: BigNumberish[],
      maturationTimestampList: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multiDeposit(uint256[],uint256[])"(
      amountList: BigNumberish[],
      maturationTimestampList: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    multiEarlyWithdraw(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multiEarlyWithdraw(uint256[],uint256[])"(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    multiWithdraw(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multiWithdraw(uint256[],uint256[])"(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setDepositNFTBaseURI(
      newURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDepositNFTBaseURI(string)"(
      newURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDepositNFTContractURI(
      newURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDepositNFTContractURI(string)"(
      newURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDepositNFTTokenURI(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDepositNFTTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeModel(
      newValue: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeModel(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFundingNFTBaseURI(
      newURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFundingNFTBaseURI(string)"(
      newURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFundingNFTContractURI(
      newURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFundingNFTContractURI(string)"(
      newURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFundingNFTTokenURI(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFundingNFTTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInterestModel(
      newValue: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInterestModel(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInterestOracle(
      newValue: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInterestOracle(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMPHMinter(
      newValue: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMPHMinter(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxDepositAmount(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxDepositAmount(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxDepositPeriod(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxDepositPeriod(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinDepositAmount(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinDepositAmount(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinDepositPeriod(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinDepositPeriod(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewards(
      newValue: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewards(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stablecoin(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "stablecoin()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    surplus(overrides?: Overrides): Promise<ContractTransaction>;

    "surplus()"(overrides?: Overrides): Promise<ContractTransaction>;

    surplusOfDeposit(
      depositID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "surplusOfDeposit(uint256)"(
      depositID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalDeposit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalDeposit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalInterestOwed(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalInterestOwed()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unfundedUserDepositAmount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "unfundedUserDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdraw(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MaxDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "MaxDepositAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  MaxDepositPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "MaxDepositPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  MinDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "MinDepositAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  MinDepositPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "MinDepositPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  calculateInterestAmount(
    depositAmount: BigNumberish,
    depositPeriodInSeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "calculateInterestAmount(uint256,uint256)"(
    depositAmount: BigNumberish,
    depositPeriodInSeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    maturationTimestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    amount: BigNumberish,
    maturationTimestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositIsFunded(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "depositIsFunded(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  depositNFT(overrides?: CallOverrides): Promise<string>;

  "depositNFT()"(overrides?: CallOverrides): Promise<string>;

  depositsLength(overrides?: CallOverrides): Promise<BigNumber>;

  "depositsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  earlyWithdraw(
    depositID: BigNumberish,
    fundingID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "earlyWithdraw(uint256,uint256)"(
    depositID: BigNumberish,
    fundingID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feeModel(overrides?: CallOverrides): Promise<string>;

  "feeModel()"(overrides?: CallOverrides): Promise<string>;

  fundAll(overrides?: Overrides): Promise<ContractTransaction>;

  "fundAll()"(overrides?: Overrides): Promise<ContractTransaction>;

  fundMultiple(
    toDepositID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "fundMultiple(uint256)"(
    toDepositID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fundingListLength(overrides?: CallOverrides): Promise<BigNumber>;

  "fundingListLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  fundingNFT(overrides?: CallOverrides): Promise<string>;

  "fundingNFT()"(overrides?: CallOverrides): Promise<string>;

  getDeposit(
    depositID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    maturationTimestamp: BigNumber;
    interestOwed: BigNumber;
    initialMoneyMarketIncomeIndex: BigNumber;
    active: boolean;
    finalSurplusIsNegative: boolean;
    finalSurplusAmount: BigNumber;
    mintMPHAmount: BigNumber;
    depositTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: boolean;
    5: boolean;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
  }>;

  "getDeposit(uint256)"(
    depositID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    maturationTimestamp: BigNumber;
    interestOwed: BigNumber;
    initialMoneyMarketIncomeIndex: BigNumber;
    active: boolean;
    finalSurplusIsNegative: boolean;
    finalSurplusAmount: BigNumber;
    mintMPHAmount: BigNumber;
    depositTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: boolean;
    5: boolean;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
  }>;

  getFunding(
    fundingID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromDepositID: BigNumber;
    toDepositID: BigNumber;
    recordedFundedDepositAmount: BigNumber;
    recordedMoneyMarketIncomeIndex: BigNumber;
    creationTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "getFunding(uint256)"(
    fundingID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromDepositID: BigNumber;
    toDepositID: BigNumber;
    recordedFundedDepositAmount: BigNumber;
    recordedMoneyMarketIncomeIndex: BigNumber;
    creationTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  interestModel(overrides?: CallOverrides): Promise<string>;

  "interestModel()"(overrides?: CallOverrides): Promise<string>;

  interestOracle(overrides?: CallOverrides): Promise<string>;

  "interestOracle()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  latestFundedDepositID(overrides?: CallOverrides): Promise<BigNumber>;

  "latestFundedDepositID()"(overrides?: CallOverrides): Promise<BigNumber>;

  moneyMarket(overrides?: CallOverrides): Promise<string>;

  "moneyMarket()"(overrides?: CallOverrides): Promise<string>;

  moneyMarketIncomeIndex(overrides?: Overrides): Promise<ContractTransaction>;

  "moneyMarketIncomeIndex()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mphMinter(overrides?: CallOverrides): Promise<string>;

  "mphMinter()"(overrides?: CallOverrides): Promise<string>;

  multiDeposit(
    amountList: BigNumberish[],
    maturationTimestampList: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multiDeposit(uint256[],uint256[])"(
    amountList: BigNumberish[],
    maturationTimestampList: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  multiEarlyWithdraw(
    depositIDList: BigNumberish[],
    fundingIDList: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multiEarlyWithdraw(uint256[],uint256[])"(
    depositIDList: BigNumberish[],
    fundingIDList: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  multiWithdraw(
    depositIDList: BigNumberish[],
    fundingIDList: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multiWithdraw(uint256[],uint256[])"(
    depositIDList: BigNumberish[],
    fundingIDList: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setDepositNFTBaseURI(
    newURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDepositNFTBaseURI(string)"(
    newURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDepositNFTContractURI(
    newURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDepositNFTContractURI(string)"(
    newURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDepositNFTTokenURI(
    tokenId: BigNumberish,
    newURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDepositNFTTokenURI(uint256,string)"(
    tokenId: BigNumberish,
    newURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeModel(
    newValue: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeModel(address)"(
    newValue: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFundingNFTBaseURI(
    newURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFundingNFTBaseURI(string)"(
    newURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFundingNFTContractURI(
    newURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFundingNFTContractURI(string)"(
    newURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFundingNFTTokenURI(
    tokenId: BigNumberish,
    newURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFundingNFTTokenURI(uint256,string)"(
    tokenId: BigNumberish,
    newURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInterestModel(
    newValue: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInterestModel(address)"(
    newValue: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInterestOracle(
    newValue: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInterestOracle(address)"(
    newValue: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMPHMinter(
    newValue: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMPHMinter(address)"(
    newValue: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxDepositAmount(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxDepositAmount(uint256)"(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxDepositPeriod(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxDepositPeriod(uint256)"(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinDepositAmount(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinDepositAmount(uint256)"(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinDepositPeriod(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinDepositPeriod(uint256)"(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewards(
    newValue: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewards(address)"(
    newValue: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stablecoin(overrides?: CallOverrides): Promise<string>;

  "stablecoin()"(overrides?: CallOverrides): Promise<string>;

  surplus(overrides?: Overrides): Promise<ContractTransaction>;

  "surplus()"(overrides?: Overrides): Promise<ContractTransaction>;

  surplusOfDeposit(
    depositID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "surplusOfDeposit(uint256)"(
    depositID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  "totalDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalInterestOwed(overrides?: CallOverrides): Promise<BigNumber>;

  "totalInterestOwed()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unfundedUserDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "unfundedUserDepositAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    depositID: BigNumberish,
    fundingID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    depositID: BigNumberish,
    fundingID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MaxDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "MaxDepositAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    MaxDepositPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "MaxDepositPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    MinDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "MinDepositAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    MinDepositPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "MinDepositPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterestAmount(
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInterestAmount(uint256,uint256)"(
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      maturationTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      amount: BigNumberish,
      maturationTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositIsFunded(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "depositIsFunded(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositNFT(overrides?: CallOverrides): Promise<string>;

    "depositNFT()"(overrides?: CallOverrides): Promise<string>;

    depositsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "depositsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    earlyWithdraw(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "earlyWithdraw(uint256,uint256)"(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeModel(overrides?: CallOverrides): Promise<string>;

    "feeModel()"(overrides?: CallOverrides): Promise<string>;

    fundAll(overrides?: CallOverrides): Promise<void>;

    "fundAll()"(overrides?: CallOverrides): Promise<void>;

    fundMultiple(
      toDepositID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "fundMultiple(uint256)"(
      toDepositID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundingListLength(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingListLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingNFT(overrides?: CallOverrides): Promise<string>;

    "fundingNFT()"(overrides?: CallOverrides): Promise<string>;

    getDeposit(
      depositID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      maturationTimestamp: BigNumber;
      interestOwed: BigNumber;
      initialMoneyMarketIncomeIndex: BigNumber;
      active: boolean;
      finalSurplusIsNegative: boolean;
      finalSurplusAmount: BigNumber;
      mintMPHAmount: BigNumber;
      depositTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
      5: boolean;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
    }>;

    "getDeposit(uint256)"(
      depositID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      maturationTimestamp: BigNumber;
      interestOwed: BigNumber;
      initialMoneyMarketIncomeIndex: BigNumber;
      active: boolean;
      finalSurplusIsNegative: boolean;
      finalSurplusAmount: BigNumber;
      mintMPHAmount: BigNumber;
      depositTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
      5: boolean;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
    }>;

    getFunding(
      fundingID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromDepositID: BigNumber;
      toDepositID: BigNumber;
      recordedFundedDepositAmount: BigNumber;
      recordedMoneyMarketIncomeIndex: BigNumber;
      creationTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "getFunding(uint256)"(
      fundingID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromDepositID: BigNumber;
      toDepositID: BigNumber;
      recordedFundedDepositAmount: BigNumber;
      recordedMoneyMarketIncomeIndex: BigNumber;
      creationTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    interestModel(overrides?: CallOverrides): Promise<string>;

    "interestModel()"(overrides?: CallOverrides): Promise<string>;

    interestOracle(overrides?: CallOverrides): Promise<string>;

    "interestOracle()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    latestFundedDepositID(overrides?: CallOverrides): Promise<BigNumber>;

    "latestFundedDepositID()"(overrides?: CallOverrides): Promise<BigNumber>;

    moneyMarket(overrides?: CallOverrides): Promise<string>;

    "moneyMarket()"(overrides?: CallOverrides): Promise<string>;

    moneyMarketIncomeIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "moneyMarketIncomeIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    mphMinter(overrides?: CallOverrides): Promise<string>;

    "mphMinter()"(overrides?: CallOverrides): Promise<string>;

    multiDeposit(
      amountList: BigNumberish[],
      maturationTimestampList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "multiDeposit(uint256[],uint256[])"(
      amountList: BigNumberish[],
      maturationTimestampList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    multiEarlyWithdraw(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "multiEarlyWithdraw(uint256[],uint256[])"(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    multiWithdraw(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "multiWithdraw(uint256[],uint256[])"(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDepositNFTBaseURI(
      newURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDepositNFTBaseURI(string)"(
      newURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositNFTContractURI(
      newURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDepositNFTContractURI(string)"(
      newURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositNFTTokenURI(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDepositNFTTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeModel(newValue: string, overrides?: CallOverrides): Promise<void>;

    "setFeeModel(address)"(
      newValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingNFTBaseURI(
      newURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFundingNFTBaseURI(string)"(
      newURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingNFTContractURI(
      newURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFundingNFTContractURI(string)"(
      newURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingNFTTokenURI(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFundingNFTTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestModel(
      newValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestModel(address)"(
      newValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestOracle(
      newValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestOracle(address)"(
      newValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMPHMinter(newValue: string, overrides?: CallOverrides): Promise<void>;

    "setMPHMinter(address)"(
      newValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDepositAmount(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxDepositAmount(uint256)"(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDepositPeriod(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxDepositPeriod(uint256)"(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinDepositAmount(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinDepositAmount(uint256)"(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinDepositPeriod(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinDepositPeriod(uint256)"(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewards(newValue: string, overrides?: CallOverrides): Promise<void>;

    "setRewards(address)"(
      newValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stablecoin(overrides?: CallOverrides): Promise<string>;

    "stablecoin()"(overrides?: CallOverrides): Promise<string>;

    surplus(
      overrides?: CallOverrides
    ): Promise<{
      isNegative: boolean;
      surplusAmount: BigNumber;
      0: boolean;
      1: BigNumber;
    }>;

    "surplus()"(
      overrides?: CallOverrides
    ): Promise<{
      isNegative: boolean;
      surplusAmount: BigNumber;
      0: boolean;
      1: BigNumber;
    }>;

    surplusOfDeposit(
      depositID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isNegative: boolean;
      surplusAmount: BigNumber;
      0: boolean;
      1: BigNumber;
    }>;

    "surplusOfDeposit(uint256)"(
      depositID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isNegative: boolean;
      surplusAmount: BigNumber;
      0: boolean;
      1: BigNumber;
    }>;

    totalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalInterestOwed(overrides?: CallOverrides): Promise<BigNumber>;

    "totalInterestOwed()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unfundedUserDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "unfundedUserDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    EDeposit(
      sender: string | null,
      depositID: BigNumberish | null,
      amount: null,
      maturationTimestamp: null,
      interestAmount: null,
      mintMPHAmount: null
    ): EventFilter;

    EFund(
      sender: string | null,
      fundingID: BigNumberish | null,
      deficitAmount: null
    ): EventFilter;

    ESetParamAddress(
      sender: string | null,
      paramName: string | null,
      newValue: null
    ): EventFilter;

    ESetParamUint(
      sender: string | null,
      paramName: string | null,
      newValue: null
    ): EventFilter;

    EWithdraw(
      sender: string | null,
      depositID: BigNumberish | null,
      fundingID: BigNumberish | null,
      early: null,
      takeBackMPHAmount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    MaxDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "MaxDepositAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    MaxDepositPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "MaxDepositPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    MinDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "MinDepositAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    MinDepositPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "MinDepositPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterestAmount(
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "calculateInterestAmount(uint256,uint256)"(
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      maturationTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      amount: BigNumberish,
      maturationTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositIsFunded(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "depositIsFunded(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "depositNFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "depositsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    earlyWithdraw(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "earlyWithdraw(uint256,uint256)"(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    feeModel(overrides?: CallOverrides): Promise<BigNumber>;

    "feeModel()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundAll(overrides?: Overrides): Promise<BigNumber>;

    "fundAll()"(overrides?: Overrides): Promise<BigNumber>;

    fundMultiple(
      toDepositID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "fundMultiple(uint256)"(
      toDepositID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fundingListLength(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingListLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingNFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDeposit(
      depositID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeposit(uint256)"(
      depositID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFunding(
      fundingID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFunding(uint256)"(
      fundingID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestModel(overrides?: CallOverrides): Promise<BigNumber>;

    "interestModel()"(overrides?: CallOverrides): Promise<BigNumber>;

    interestOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "interestOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestFundedDepositID(overrides?: CallOverrides): Promise<BigNumber>;

    "latestFundedDepositID()"(overrides?: CallOverrides): Promise<BigNumber>;

    moneyMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "moneyMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    moneyMarketIncomeIndex(overrides?: Overrides): Promise<BigNumber>;

    "moneyMarketIncomeIndex()"(overrides?: Overrides): Promise<BigNumber>;

    mphMinter(overrides?: CallOverrides): Promise<BigNumber>;

    "mphMinter()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiDeposit(
      amountList: BigNumberish[],
      maturationTimestampList: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "multiDeposit(uint256[],uint256[])"(
      amountList: BigNumberish[],
      maturationTimestampList: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    multiEarlyWithdraw(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "multiEarlyWithdraw(uint256[],uint256[])"(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    multiWithdraw(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "multiWithdraw(uint256[],uint256[])"(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setDepositNFTBaseURI(
      newURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDepositNFTBaseURI(string)"(
      newURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDepositNFTContractURI(
      newURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDepositNFTContractURI(string)"(
      newURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDepositNFTTokenURI(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDepositNFTTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeModel(newValue: string, overrides?: Overrides): Promise<BigNumber>;

    "setFeeModel(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFundingNFTBaseURI(
      newURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFundingNFTBaseURI(string)"(
      newURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFundingNFTContractURI(
      newURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFundingNFTContractURI(string)"(
      newURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFundingNFTTokenURI(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFundingNFTTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInterestModel(
      newValue: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInterestModel(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInterestOracle(
      newValue: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInterestOracle(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMPHMinter(newValue: string, overrides?: Overrides): Promise<BigNumber>;

    "setMPHMinter(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxDepositAmount(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxDepositAmount(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxDepositPeriod(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxDepositPeriod(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinDepositAmount(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinDepositAmount(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinDepositPeriod(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinDepositPeriod(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewards(newValue: string, overrides?: Overrides): Promise<BigNumber>;

    "setRewards(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stablecoin(overrides?: CallOverrides): Promise<BigNumber>;

    "stablecoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    surplus(overrides?: Overrides): Promise<BigNumber>;

    "surplus()"(overrides?: Overrides): Promise<BigNumber>;

    surplusOfDeposit(
      depositID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "surplusOfDeposit(uint256)"(
      depositID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalInterestOwed(overrides?: CallOverrides): Promise<BigNumber>;

    "totalInterestOwed()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unfundedUserDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "unfundedUserDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MaxDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MaxDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MaxDepositPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MaxDepositPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MinDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MinDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MinDepositPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MinDepositPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInterestAmount(
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "calculateInterestAmount(uint256,uint256)"(
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      maturationTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      amount: BigNumberish,
      maturationTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositIsFunded(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depositIsFunded(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositNFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositsLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earlyWithdraw(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "earlyWithdraw(uint256,uint256)"(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feeModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeModel()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundAll(overrides?: Overrides): Promise<PopulatedTransaction>;

    "fundAll()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    fundMultiple(
      toDepositID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fundMultiple(uint256)"(
      toDepositID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fundingListLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundingListLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundingNFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeposit(
      depositID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeposit(uint256)"(
      depositID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFunding(
      fundingID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFunding(uint256)"(
      fundingID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestModel()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestFundedDepositID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestFundedDepositID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moneyMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "moneyMarket()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moneyMarketIncomeIndex(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "moneyMarketIncomeIndex()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mphMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mphMinter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiDeposit(
      amountList: BigNumberish[],
      maturationTimestampList: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multiDeposit(uint256[],uint256[])"(
      amountList: BigNumberish[],
      maturationTimestampList: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    multiEarlyWithdraw(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multiEarlyWithdraw(uint256[],uint256[])"(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    multiWithdraw(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multiWithdraw(uint256[],uint256[])"(
      depositIDList: BigNumberish[],
      fundingIDList: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setDepositNFTBaseURI(
      newURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDepositNFTBaseURI(string)"(
      newURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDepositNFTContractURI(
      newURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDepositNFTContractURI(string)"(
      newURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDepositNFTTokenURI(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDepositNFTTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeModel(
      newValue: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeModel(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFundingNFTBaseURI(
      newURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFundingNFTBaseURI(string)"(
      newURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFundingNFTContractURI(
      newURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFundingNFTContractURI(string)"(
      newURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFundingNFTTokenURI(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFundingNFTTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      newURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInterestModel(
      newValue: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInterestModel(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInterestOracle(
      newValue: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInterestOracle(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMPHMinter(
      newValue: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMPHMinter(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxDepositAmount(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxDepositAmount(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxDepositPeriod(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxDepositPeriod(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinDepositAmount(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinDepositAmount(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinDepositPeriod(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinDepositPeriod(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewards(
      newValue: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewards(address)"(
      newValue: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stablecoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stablecoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    surplus(overrides?: Overrides): Promise<PopulatedTransaction>;

    "surplus()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    surplusOfDeposit(
      depositID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "surplusOfDeposit(uint256)"(
      depositID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalDeposit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalInterestOwed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalInterestOwed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unfundedUserDepositAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unfundedUserDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      depositID: BigNumberish,
      fundingID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}

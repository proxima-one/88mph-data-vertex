/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VestingInterface extends ethers.utils.Interface {
  functions: {
    "accountVestList(address,uint256)": FunctionFragment;
    "getVestWithdrawableAmount(address,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "vest(address,uint256,uint256)": FunctionFragment;
    "withdrawVested(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountVestList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestWithdrawableAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vest",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVested",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountVestList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestWithdrawableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVested",
    data: BytesLike
  ): Result;

  events: {};
}

export class Vesting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VestingInterface;

  functions: {
    accountVestList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      vestPeriodInSeconds: BigNumber;
      creationTimestamp: BigNumber;
      withdrawnAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "accountVestList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      vestPeriodInSeconds: BigNumber;
      creationTimestamp: BigNumber;
      withdrawnAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    getVestWithdrawableAmount(
      account: string,
      vestIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getVestWithdrawableAmount(address,uint256)"(
      account: string,
      vestIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    vest(
      to: string,
      amount: BigNumberish,
      vestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vest(address,uint256,uint256)"(
      to: string,
      amount: BigNumberish,
      vestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawVested(
      account: string,
      vestIdx: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawVested(address,uint256)"(
      account: string,
      vestIdx: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accountVestList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    vestPeriodInSeconds: BigNumber;
    creationTimestamp: BigNumber;
    withdrawnAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "accountVestList(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    vestPeriodInSeconds: BigNumber;
    creationTimestamp: BigNumber;
    withdrawnAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  getVestWithdrawableAmount(
    account: string,
    vestIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getVestWithdrawableAmount(address,uint256)"(
    account: string,
    vestIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  vest(
    to: string,
    amount: BigNumberish,
    vestPeriodInSeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vest(address,uint256,uint256)"(
    to: string,
    amount: BigNumberish,
    vestPeriodInSeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawVested(
    account: string,
    vestIdx: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawVested(address,uint256)"(
    account: string,
    vestIdx: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accountVestList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      vestPeriodInSeconds: BigNumber;
      creationTimestamp: BigNumber;
      withdrawnAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "accountVestList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      vestPeriodInSeconds: BigNumber;
      creationTimestamp: BigNumber;
      withdrawnAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    getVestWithdrawableAmount(
      account: string,
      vestIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVestWithdrawableAmount(address,uint256)"(
      account: string,
      vestIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    vest(
      to: string,
      amount: BigNumberish,
      vestPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vest(address,uint256,uint256)"(
      to: string,
      amount: BigNumberish,
      vestPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawVested(
      account: string,
      vestIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawVested(address,uint256)"(
      account: string,
      vestIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    accountVestList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accountVestList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestWithdrawableAmount(
      account: string,
      vestIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVestWithdrawableAmount(address,uint256)"(
      account: string,
      vestIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    vest(
      to: string,
      amount: BigNumberish,
      vestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vest(address,uint256,uint256)"(
      to: string,
      amount: BigNumberish,
      vestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawVested(
      account: string,
      vestIdx: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawVested(address,uint256)"(
      account: string,
      vestIdx: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountVestList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountVestList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestWithdrawableAmount(
      account: string,
      vestIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVestWithdrawableAmount(address,uint256)"(
      account: string,
      vestIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vest(
      to: string,
      amount: BigNumberish,
      vestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vest(address,uint256,uint256)"(
      to: string,
      amount: BigNumberish,
      vestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawVested(
      account: string,
      vestIdx: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawVested(address,uint256)"(
      account: string,
      vestIdx: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}

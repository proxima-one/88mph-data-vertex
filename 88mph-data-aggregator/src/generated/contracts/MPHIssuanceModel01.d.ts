/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MPHIssuanceModel01Interface extends ethers.utils.Interface {
  functions: {
    "computeDepositorReward(address,uint256,uint256,uint256)": FunctionFragment;
    "computeFunderReward(address,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "computeTakeBackDepositorRewardAmount(address,uint256,bool)": FunctionFragment;
    "devRewardMultiplier()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolDepositorRewardMintMultiplier(address)": FunctionFragment;
    "poolDepositorRewardTakeBackMultiplier(address)": FunctionFragment;
    "poolDepositorRewardVestPeriod(address)": FunctionFragment;
    "poolFunderRewardMultiplier(address)": FunctionFragment;
    "poolFunderRewardVestPeriod(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDevRewardMultiplier(uint256)": FunctionFragment;
    "setPoolDepositorRewardMintMultiplier(address,uint256)": FunctionFragment;
    "setPoolDepositorRewardTakeBackMultiplier(address,uint256)": FunctionFragment;
    "setPoolDepositorRewardVestPeriod(address,uint256)": FunctionFragment;
    "setPoolFunderRewardMultiplier(address,uint256)": FunctionFragment;
    "setPoolFunderRewardVestPeriod(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "computeDepositorReward",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeFunderReward",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTakeBackDepositorRewardAmount",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "devRewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolDepositorRewardMintMultiplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolDepositorRewardTakeBackMultiplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolDepositorRewardVestPeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolFunderRewardMultiplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolFunderRewardVestPeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDevRewardMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolDepositorRewardMintMultiplier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolDepositorRewardTakeBackMultiplier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolDepositorRewardVestPeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFunderRewardMultiplier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFunderRewardVestPeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeDepositorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeFunderReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTakeBackDepositorRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolDepositorRewardMintMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolDepositorRewardTakeBackMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolDepositorRewardVestPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolFunderRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolFunderRewardVestPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolDepositorRewardMintMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolDepositorRewardTakeBackMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolDepositorRewardVestPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolFunderRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolFunderRewardVestPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ESetParamAddress(address,string,address)": EventFragment;
    "ESetParamUint(address,string,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ESetParamAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ESetParamUint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class MPHIssuanceModel01 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MPHIssuanceModel01Interface;

  functions: {
    computeDepositorReward(
      pool: string,
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      interestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      depositorReward: BigNumber;
      devReward: BigNumber;
      govReward: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "computeDepositorReward(address,uint256,uint256,uint256)"(
      pool: string,
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      interestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      depositorReward: BigNumber;
      devReward: BigNumber;
      govReward: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    computeFunderReward(
      pool: string,
      depositAmount: BigNumberish,
      fundingCreationTimestamp: BigNumberish,
      maturationTimestamp: BigNumberish,
      interestPayoutAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<{
      funderReward: BigNumber;
      devReward: BigNumber;
      govReward: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "computeFunderReward(address,uint256,uint256,uint256,uint256,bool)"(
      pool: string,
      depositAmount: BigNumberish,
      fundingCreationTimestamp: BigNumberish,
      maturationTimestamp: BigNumberish,
      interestPayoutAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<{
      funderReward: BigNumber;
      devReward: BigNumber;
      govReward: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    computeTakeBackDepositorRewardAmount(
      pool: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<{
      takeBackAmount: BigNumber;
      devReward: BigNumber;
      govReward: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "computeTakeBackDepositorRewardAmount(address,uint256,bool)"(
      pool: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<{
      takeBackAmount: BigNumber;
      devReward: BigNumber;
      govReward: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    devRewardMultiplier(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "devRewardMultiplier()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    poolDepositorRewardMintMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "poolDepositorRewardMintMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    poolDepositorRewardTakeBackMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "poolDepositorRewardTakeBackMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    poolDepositorRewardVestPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "poolDepositorRewardVestPeriod(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    poolFunderRewardMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "poolFunderRewardMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    poolFunderRewardVestPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "poolFunderRewardVestPeriod(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setDevRewardMultiplier(
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevRewardMultiplier(uint256)"(
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolDepositorRewardMintMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolDepositorRewardMintMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolDepositorRewardTakeBackMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolDepositorRewardTakeBackMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolDepositorRewardVestPeriod(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolDepositorRewardVestPeriod(address,uint256)"(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolFunderRewardMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolFunderRewardMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolFunderRewardVestPeriod(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolFunderRewardVestPeriod(address,uint256)"(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  computeDepositorReward(
    pool: string,
    depositAmount: BigNumberish,
    depositPeriodInSeconds: BigNumberish,
    interestAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    depositorReward: BigNumber;
    devReward: BigNumber;
    govReward: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "computeDepositorReward(address,uint256,uint256,uint256)"(
    pool: string,
    depositAmount: BigNumberish,
    depositPeriodInSeconds: BigNumberish,
    interestAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    depositorReward: BigNumber;
    devReward: BigNumber;
    govReward: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  computeFunderReward(
    pool: string,
    depositAmount: BigNumberish,
    fundingCreationTimestamp: BigNumberish,
    maturationTimestamp: BigNumberish,
    interestPayoutAmount: BigNumberish,
    early: boolean,
    overrides?: CallOverrides
  ): Promise<{
    funderReward: BigNumber;
    devReward: BigNumber;
    govReward: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "computeFunderReward(address,uint256,uint256,uint256,uint256,bool)"(
    pool: string,
    depositAmount: BigNumberish,
    fundingCreationTimestamp: BigNumberish,
    maturationTimestamp: BigNumberish,
    interestPayoutAmount: BigNumberish,
    early: boolean,
    overrides?: CallOverrides
  ): Promise<{
    funderReward: BigNumber;
    devReward: BigNumber;
    govReward: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  computeTakeBackDepositorRewardAmount(
    pool: string,
    mintMPHAmount: BigNumberish,
    early: boolean,
    overrides?: CallOverrides
  ): Promise<{
    takeBackAmount: BigNumber;
    devReward: BigNumber;
    govReward: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "computeTakeBackDepositorRewardAmount(address,uint256,bool)"(
    pool: string,
    mintMPHAmount: BigNumberish,
    early: boolean,
    overrides?: CallOverrides
  ): Promise<{
    takeBackAmount: BigNumber;
    devReward: BigNumber;
    govReward: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  devRewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "devRewardMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  poolDepositorRewardMintMultiplier(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolDepositorRewardMintMultiplier(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolDepositorRewardTakeBackMultiplier(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolDepositorRewardTakeBackMultiplier(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolDepositorRewardVestPeriod(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolDepositorRewardVestPeriod(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolFunderRewardMultiplier(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolFunderRewardMultiplier(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolFunderRewardVestPeriod(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolFunderRewardVestPeriod(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setDevRewardMultiplier(
    newMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevRewardMultiplier(uint256)"(
    newMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolDepositorRewardMintMultiplier(
    pool: string,
    newMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolDepositorRewardMintMultiplier(address,uint256)"(
    pool: string,
    newMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolDepositorRewardTakeBackMultiplier(
    pool: string,
    newMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolDepositorRewardTakeBackMultiplier(address,uint256)"(
    pool: string,
    newMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolDepositorRewardVestPeriod(
    pool: string,
    newVestPeriodInSeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolDepositorRewardVestPeriod(address,uint256)"(
    pool: string,
    newVestPeriodInSeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolFunderRewardMultiplier(
    pool: string,
    newMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolFunderRewardMultiplier(address,uint256)"(
    pool: string,
    newMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolFunderRewardVestPeriod(
    pool: string,
    newVestPeriodInSeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolFunderRewardVestPeriod(address,uint256)"(
    pool: string,
    newVestPeriodInSeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    computeDepositorReward(
      pool: string,
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      interestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      depositorReward: BigNumber;
      devReward: BigNumber;
      govReward: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "computeDepositorReward(address,uint256,uint256,uint256)"(
      pool: string,
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      interestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      depositorReward: BigNumber;
      devReward: BigNumber;
      govReward: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    computeFunderReward(
      pool: string,
      depositAmount: BigNumberish,
      fundingCreationTimestamp: BigNumberish,
      maturationTimestamp: BigNumberish,
      interestPayoutAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<{
      funderReward: BigNumber;
      devReward: BigNumber;
      govReward: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "computeFunderReward(address,uint256,uint256,uint256,uint256,bool)"(
      pool: string,
      depositAmount: BigNumberish,
      fundingCreationTimestamp: BigNumberish,
      maturationTimestamp: BigNumberish,
      interestPayoutAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<{
      funderReward: BigNumber;
      devReward: BigNumber;
      govReward: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    computeTakeBackDepositorRewardAmount(
      pool: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<{
      takeBackAmount: BigNumber;
      devReward: BigNumber;
      govReward: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "computeTakeBackDepositorRewardAmount(address,uint256,bool)"(
      pool: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<{
      takeBackAmount: BigNumber;
      devReward: BigNumber;
      govReward: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    devRewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "devRewardMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolDepositorRewardMintMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolDepositorRewardMintMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolDepositorRewardTakeBackMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolDepositorRewardTakeBackMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolDepositorRewardVestPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolDepositorRewardVestPeriod(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFunderRewardMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolFunderRewardMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFunderRewardVestPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolFunderRewardVestPeriod(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDevRewardMultiplier(
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDevRewardMultiplier(uint256)"(
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolDepositorRewardMintMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolDepositorRewardMintMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolDepositorRewardTakeBackMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolDepositorRewardTakeBackMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolDepositorRewardVestPeriod(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolDepositorRewardVestPeriod(address,uint256)"(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolFunderRewardMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolFunderRewardMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolFunderRewardVestPeriod(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolFunderRewardVestPeriod(address,uint256)"(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ESetParamAddress(
      sender: string | null,
      paramName: string | null,
      newValue: null
    ): EventFilter;

    ESetParamUint(
      sender: string | null,
      paramName: string | null,
      pool: string | null,
      newValue: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    computeDepositorReward(
      pool: string,
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      interestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeDepositorReward(address,uint256,uint256,uint256)"(
      pool: string,
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      interestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeFunderReward(
      pool: string,
      depositAmount: BigNumberish,
      fundingCreationTimestamp: BigNumberish,
      maturationTimestamp: BigNumberish,
      interestPayoutAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeFunderReward(address,uint256,uint256,uint256,uint256,bool)"(
      pool: string,
      depositAmount: BigNumberish,
      fundingCreationTimestamp: BigNumberish,
      maturationTimestamp: BigNumberish,
      interestPayoutAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTakeBackDepositorRewardAmount(
      pool: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeTakeBackDepositorRewardAmount(address,uint256,bool)"(
      pool: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    devRewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "devRewardMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolDepositorRewardMintMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolDepositorRewardMintMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolDepositorRewardTakeBackMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolDepositorRewardTakeBackMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolDepositorRewardVestPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolDepositorRewardVestPeriod(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFunderRewardMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolFunderRewardMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFunderRewardVestPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolFunderRewardVestPeriod(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setDevRewardMultiplier(
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDevRewardMultiplier(uint256)"(
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolDepositorRewardMintMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoolDepositorRewardMintMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolDepositorRewardTakeBackMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoolDepositorRewardTakeBackMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolDepositorRewardVestPeriod(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoolDepositorRewardVestPeriod(address,uint256)"(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolFunderRewardMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoolFunderRewardMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolFunderRewardVestPeriod(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoolFunderRewardVestPeriod(address,uint256)"(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeDepositorReward(
      pool: string,
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      interestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeDepositorReward(address,uint256,uint256,uint256)"(
      pool: string,
      depositAmount: BigNumberish,
      depositPeriodInSeconds: BigNumberish,
      interestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeFunderReward(
      pool: string,
      depositAmount: BigNumberish,
      fundingCreationTimestamp: BigNumberish,
      maturationTimestamp: BigNumberish,
      interestPayoutAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeFunderReward(address,uint256,uint256,uint256,uint256,bool)"(
      pool: string,
      depositAmount: BigNumberish,
      fundingCreationTimestamp: BigNumberish,
      maturationTimestamp: BigNumberish,
      interestPayoutAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeTakeBackDepositorRewardAmount(
      pool: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeTakeBackDepositorRewardAmount(address,uint256,bool)"(
      pool: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    devRewardMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "devRewardMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolDepositorRewardMintMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolDepositorRewardMintMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolDepositorRewardTakeBackMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolDepositorRewardTakeBackMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolDepositorRewardVestPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolDepositorRewardVestPeriod(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolFunderRewardMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolFunderRewardMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolFunderRewardVestPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolFunderRewardVestPeriod(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setDevRewardMultiplier(
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevRewardMultiplier(uint256)"(
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolDepositorRewardMintMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolDepositorRewardMintMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolDepositorRewardTakeBackMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolDepositorRewardTakeBackMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolDepositorRewardVestPeriod(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolDepositorRewardVestPeriod(address,uint256)"(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolFunderRewardMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolFunderRewardMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolFunderRewardVestPeriod(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolFunderRewardVestPeriod(address,uint256)"(
      pool: string,
      newVestPeriodInSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
